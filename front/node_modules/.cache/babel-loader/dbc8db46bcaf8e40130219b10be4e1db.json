{"ast":null,"code":"import { useState, useCallback, useEffect } from \"react\";\nconst storageName = 'userData';\nexport const useAuth = () => {\n  const [token, setToken] = useState(null);\n  const [ready, setReady] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const [decoded, setDecoded] = useState('');\n\n  const updateHandler = async data => {\n    try {\n      const temp = data.token;\n      const jWTdecoded = await request('api/data/verify', 'POST', {\n        temp\n      });\n      return jWTdecoded; //auth.login(user.token, user.userId, data.user)\n    } catch (e) {}\n  };\n\n  const login = useCallback((jwtToken, id, data) => {\n    setToken(jwtToken);\n    setUserId(id);\n    setDecoded(data);\n    localStorage.setItem(storageName, JSON.stringify({\n      userId: id,\n      token: jwtToken,\n      decoded: data\n    }));\n  }, []);\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    setDecoded(null);\n    localStorage.removeItem(storageName);\n  }, []);\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(storageName));\n\n    if (data && data.token) {\n      decoded = updateHandler(data);\n      login(data.token, data.userId, decoded);\n    }\n\n    setReady(true);\n  }, [login]);\n  return {\n    login,\n    logout,\n    token,\n    userId,\n    decoded,\n    ready\n  };\n};","map":{"version":3,"sources":["C:/Users/Kirill/Desktop/HSE/callSystem/front/src/hooks/auth.hook.js"],"names":["useState","useCallback","useEffect","storageName","useAuth","token","setToken","ready","setReady","userId","setUserId","decoded","setDecoded","updateHandler","data","temp","jWTdecoded","request","e","login","jwtToken","id","localStorage","setItem","JSON","stringify","logout","removeItem","parse","getItem"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAgD,OAAhD;AAEA,MAAMC,WAAW,GAAG,UAApB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAK;AACxB,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBN,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAM,CAACO,KAAD,EAAOC,QAAP,IAAmBR,QAAQ,CAAC,KAAD,CAAjC;AACA,QAAM,CAACS,MAAD,EAAQC,SAAR,IAAqBV,QAAQ,CAAC,IAAD,CAAnC;AACA,QAAM,CAACW,OAAD,EAASC,UAAT,IAAuBZ,QAAQ,CAAC,EAAD,CAArC;;AAEA,QAAMa,aAAa,GAAG,MAAMC,IAAN,IAAc;AAChC,QAAG;AAEC,YAAMC,IAAI,GAAGD,IAAI,CAACT,KAAlB;AAEA,YAAMW,UAAU,GAAG,MAAMC,OAAO,CAAC,iBAAD,EAAmB,MAAnB,EAA2B;AAACF,QAAAA;AAAD,OAA3B,CAAhC;AAEA,aAAOC,UAAP,CAND,CAQC;AACH,KATD,CASE,OAAME,CAAN,EAAS,CAEV;AACJ,GAbD;;AAeA,QAAMC,KAAK,GAAGlB,WAAW,CAAE,CAACmB,QAAD,EAAWC,EAAX,EAAeP,IAAf,KAAuB;AAC9CR,IAAAA,QAAQ,CAACc,QAAD,CAAR;AACAV,IAAAA,SAAS,CAACW,EAAD,CAAT;AACAT,IAAAA,UAAU,CAACE,IAAD,CAAV;AAGAQ,IAAAA,YAAY,CAACC,OAAb,CAAqBpB,WAArB,EAAiCqB,IAAI,CAACC,SAAL,CAAe;AAC5ChB,MAAAA,MAAM,EAACY,EADqC;AAE5ChB,MAAAA,KAAK,EAACe,QAFsC;AAG5CT,MAAAA,OAAO,EAACG;AAHoC,KAAf,CAAjC;AAKH,GAXwB,EAWvB,EAXuB,CAAzB;AAaA,QAAMY,MAAM,GAAGzB,WAAW,CAAE,MAAM;AAC9BK,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAU,IAAAA,YAAY,CAACK,UAAb,CAAwBxB,WAAxB;AACH,GALyB,EAKxB,EALwB,CAA1B;AAOAD,EAAAA,SAAS,CAAC,MAAK;AAEX,UAAMY,IAAI,GAAGU,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB1B,WAArB,CAAX,CAAb;;AAEA,QAAIW,IAAI,IAAIA,IAAI,CAACT,KAAjB,EAAuB;AAEvBM,MAAAA,OAAO,GAAGE,aAAa,CAACC,IAAD,CAAvB;AAEAK,MAAAA,KAAK,CAACL,IAAI,CAACT,KAAN,EAAaS,IAAI,CAACL,MAAlB,EAA0BE,OAA1B,CAAL;AACC;;AACDH,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAXQ,EAWN,CAACW,KAAD,CAXM,CAAT;AAaA,SAAO;AAACA,IAAAA,KAAD;AAAOO,IAAAA,MAAP;AAAcrB,IAAAA,KAAd;AAAoBI,IAAAA,MAApB;AAA2BE,IAAAA,OAA3B;AAAmCJ,IAAAA;AAAnC,GAAP;AACH,CAvDM","sourcesContent":["import { useState, useCallback, useEffect} from \"react\"\r\n\r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () =>{\r\n    const [token,setToken] = useState(null)\r\n    const [ready,setReady] = useState(false)\r\n    const [userId,setUserId] = useState(null)\r\n    const [decoded,setDecoded] = useState('')\r\n\r\n    const updateHandler = async(data) =>{\r\n        try{\r\n           \r\n            const temp = data.token\r\n\r\n            const jWTdecoded = await request('api/data/verify','POST', {temp} )\r\n\r\n            return jWTdecoded\r\n\r\n            //auth.login(user.token, user.userId, data.user)\r\n        } catch(e) {\r\n\r\n        }\r\n    } \r\n\r\n    const login = useCallback( (jwtToken, id, data) =>{\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n        setDecoded(data)\r\n\r\n\r\n        localStorage.setItem(storageName,JSON.stringify({\r\n            userId:id,\r\n            token:jwtToken,\r\n            decoded:data\r\n        }))\r\n    },[])\r\n\r\n    const logout = useCallback( () => {\r\n        setToken(null)\r\n        setUserId(null)\r\n        setDecoded(null)\r\n        localStorage.removeItem(storageName)\r\n    },[])\r\n\r\n    useEffect(() =>{\r\n        \r\n        const data = JSON.parse(localStorage.getItem(storageName))\r\n        \r\n        if (data && data.token){\r\n\r\n        decoded = updateHandler(data)\r\n\r\n        login(data.token, data.userId, decoded)            \r\n        }\r\n        setReady(true)\r\n    }, [login])\r\n\r\n    return {login,logout,token,userId,decoded,ready}\r\n}"]},"metadata":{},"sourceType":"module"}