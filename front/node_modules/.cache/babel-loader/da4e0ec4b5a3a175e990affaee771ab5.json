{"ast":null,"code":"import { useState, useCallback, useEffect } from \"react\";\nimport { useHttp } from \"./http.hooks\";\nconst storageName = 'userData';\nexport const useAuth = () => {\n  const [token, setToken] = useState(null);\n  const [ready, setReady] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const [decoded, setDecoded] = useState('');\n  const {\n    request\n  } = useHttp();\n\n  const updateHandler = async data => {\n    try {\n      const temp = data.token;\n      const jWTdecoded = await request('api/data/verify', 'POST', {\n        temp\n      });\n      return jWTdecoded; //auth.login(user.token, user.userId, data.user)\n    } catch (e) {}\n  };\n\n  const login = useCallback((jwtToken, id, data) => {\n    setToken(jwtToken);\n    setUserId(id);\n    setDecoded(data);\n    localStorage.setItem(storageName, JSON.stringify({\n      userId: id,\n      token: jwtToken //  decoded:data\n\n    }));\n  }, []);\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    setDecoded(null);\n    localStorage.removeItem(storageName);\n  }, []);\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(storageName));\n\n    if (data && data.token) {\n      const jwt = updateHandler(data);\n      login(data.token, data.userId, jwt);\n    }\n\n    setReady(true);\n  }, [login]);\n  return {\n    login,\n    logout,\n    token,\n    userId,\n    decoded,\n    ready\n  };\n};","map":{"version":3,"sources":["C:/Users/Kirill/Desktop/HSE/callSystem/front/src/hooks/auth.hook.js"],"names":["useState","useCallback","useEffect","useHttp","storageName","useAuth","token","setToken","ready","setReady","userId","setUserId","decoded","setDecoded","request","updateHandler","data","temp","jWTdecoded","e","login","jwtToken","id","localStorage","setItem","JSON","stringify","logout","removeItem","parse","getItem","jwt"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAgD,OAAhD;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,MAAMC,WAAW,GAAG,UAApB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAK;AACxB,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBP,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAM,CAACQ,KAAD,EAAOC,QAAP,IAAmBT,QAAQ,CAAC,KAAD,CAAjC;AACA,QAAM,CAACU,MAAD,EAAQC,SAAR,IAAqBX,QAAQ,CAAC,IAAD,CAAnC;AACA,QAAM,CAACY,OAAD,EAASC,UAAT,IAAuBb,QAAQ,CAAC,EAAD,CAArC;AAEA,QAAM;AAACc,IAAAA;AAAD,MAAYX,OAAO,EAAzB;;AAEA,QAAMY,aAAa,GAAG,MAAMC,IAAN,IAAc;AAChC,QAAG;AAEC,YAAMC,IAAI,GAAGD,IAAI,CAACV,KAAlB;AAEA,YAAMY,UAAU,GAAG,MAAMJ,OAAO,CAAC,iBAAD,EAAmB,MAAnB,EAA2B;AAACG,QAAAA;AAAD,OAA3B,CAAhC;AAEA,aAAOC,UAAP,CAND,CAQC;AACH,KATD,CASE,OAAMC,CAAN,EAAS,CAEV;AACJ,GAbD;;AAeA,QAAMC,KAAK,GAAGnB,WAAW,CAAE,CAACoB,QAAD,EAAWC,EAAX,EAAeN,IAAf,KAAuB;AAC9CT,IAAAA,QAAQ,CAACc,QAAD,CAAR;AACAV,IAAAA,SAAS,CAACW,EAAD,CAAT;AACAT,IAAAA,UAAU,CAACG,IAAD,CAAV;AAGAO,IAAAA,YAAY,CAACC,OAAb,CAAqBpB,WAArB,EAAiCqB,IAAI,CAACC,SAAL,CAAe;AAC5ChB,MAAAA,MAAM,EAACY,EADqC;AAE5ChB,MAAAA,KAAK,EAACe,QAFsC,CAG9C;;AAH8C,KAAf,CAAjC;AAKH,GAXwB,EAWvB,EAXuB,CAAzB;AAaA,QAAMM,MAAM,GAAG1B,WAAW,CAAE,MAAM;AAC9BM,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAU,IAAAA,YAAY,CAACK,UAAb,CAAwBxB,WAAxB;AACH,GALyB,EAKxB,EALwB,CAA1B;AAOAF,EAAAA,SAAS,CAAC,MAAK;AAEX,UAAMc,IAAI,GAAGS,IAAI,CAACI,KAAL,CAAWN,YAAY,CAACO,OAAb,CAAqB1B,WAArB,CAAX,CAAb;;AAEA,QAAIY,IAAI,IAAIA,IAAI,CAACV,KAAjB,EAAuB;AAEvB,YAAMyB,GAAG,GAAGhB,aAAa,CAACC,IAAD,CAAzB;AAEAI,MAAAA,KAAK,CAACJ,IAAI,CAACV,KAAN,EAAaU,IAAI,CAACN,MAAlB,EAA0BqB,GAA1B,CAAL;AACC;;AACDtB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAXQ,EAWN,CAACW,KAAD,CAXM,CAAT;AAeA,SAAO;AAACA,IAAAA,KAAD;AAAOO,IAAAA,MAAP;AAAcrB,IAAAA,KAAd;AAAoBI,IAAAA,MAApB;AAA2BE,IAAAA,OAA3B;AAAmCJ,IAAAA;AAAnC,GAAP;AACH,CA3DM","sourcesContent":["import { useState, useCallback, useEffect} from \"react\"\r\nimport { useHttp } from \"./http.hooks\"\r\n\r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () =>{\r\n    const [token,setToken] = useState(null)\r\n    const [ready,setReady] = useState(false)\r\n    const [userId,setUserId] = useState(null)\r\n    const [decoded,setDecoded] = useState('')\r\n\r\n    const {request} = useHttp()\r\n\r\n    const updateHandler = async(data) =>{\r\n        try{\r\n           \r\n            const temp = data.token\r\n\r\n            const jWTdecoded = await request('api/data/verify','POST', {temp} )\r\n\r\n            return jWTdecoded\r\n\r\n            //auth.login(user.token, user.userId, data.user)\r\n        } catch(e) {\r\n\r\n        }\r\n    } \r\n\r\n    const login = useCallback( (jwtToken, id, data) =>{\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n        setDecoded(data)\r\n\r\n\r\n        localStorage.setItem(storageName,JSON.stringify({\r\n            userId:id,\r\n            token:jwtToken,\r\n          //  decoded:data\r\n        }))\r\n    },[])\r\n\r\n    const logout = useCallback( () => {\r\n        setToken(null)\r\n        setUserId(null)\r\n        setDecoded(null)\r\n        localStorage.removeItem(storageName)\r\n    },[])\r\n\r\n    useEffect(() =>{\r\n        \r\n        const data = JSON.parse(localStorage.getItem(storageName))\r\n        \r\n        if (data && data.token){\r\n\r\n        const jwt = updateHandler(data)\r\n\r\n        login(data.token, data.userId, jwt)            \r\n        }\r\n        setReady(true)\r\n    }, [login])\r\n\r\n\r\n\r\n    return {login,logout,token,userId,decoded,ready}\r\n}"]},"metadata":{},"sourceType":"module"}