{"ast":null,"code":"import { useState, useCallback, useEffect } from \"react\";\nconst storageName = 'userData';\nexport const useAuth = () => {\n  const [token, setToken] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const login = useCallback((jwtToken, id) => {\n    setToken(jwtToken);\n    setUserId(id);\n    localStorage.setItem(storageName, JSON.stringify({\n      userId,\n      token\n    }));\n  }, []);\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(storageName));\n\n    if (data && data.token) {\n      login(data.token, data.userId);\n    }\n  }, [login]);\n  return {\n    login,\n    token,\n    userId\n  };\n};","map":{"version":3,"sources":["C:/Users/Kirill/Desktop/HSE/callSystem/front/src/hooks/auth.hook.js"],"names":["useState","useCallback","useEffect","storageName","useAuth","token","setToken","userId","setUserId","login","jwtToken","id","localStorage","setItem","JSON","stringify","data","parse","getItem"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AAEA,MAAMC,WAAW,GAAG,UAApB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAK;AACxB,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBN,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAM,CAACO,MAAD,EAAQC,SAAR,IAAqBR,QAAQ,CAAC,IAAD,CAAnC;AAEA,QAAMS,KAAK,GAAGR,WAAW,CAAE,CAACS,QAAD,EAAWC,EAAX,KAAiB;AACxCL,IAAAA,QAAQ,CAACI,QAAD,CAAR;AACAF,IAAAA,SAAS,CAACG,EAAD,CAAT;AAEAC,IAAAA,YAAY,CAACC,OAAb,CAAqBV,WAArB,EAAiCW,IAAI,CAACC,SAAL,CAAe;AAC5CR,MAAAA,MAD4C;AACrCF,MAAAA;AADqC,KAAf,CAAjC;AAGH,GAPwB,EAOvB,EAPuB,CAAzB;AASAH,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMc,IAAI,GAAGF,IAAI,CAACG,KAAL,CAAWL,YAAY,CAACM,OAAb,CAAqBf,WAArB,CAAX,CAAb;;AAEA,QAAIa,IAAI,IAAIA,IAAI,CAACX,KAAjB,EAAuB;AACvBI,MAAAA,KAAK,CAACO,IAAI,CAACX,KAAN,EAAaW,IAAI,CAACT,MAAlB,CAAL;AACC;AACJ,GANQ,EAMN,CAACE,KAAD,CANM,CAAT;AAQA,SAAO;AAACA,IAAAA,KAAD;AAAOJ,IAAAA,KAAP;AAAaE,IAAAA;AAAb,GAAP;AACH,CAtBM","sourcesContent":["import { useState, useCallback, useEffect } from \"react\"\r\n\r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () =>{\r\n    const [token,setToken] = useState(null)\r\n    const [userId,setUserId] = useState(null)\r\n\r\n    const login = useCallback( (jwtToken, id) =>{\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n\r\n        localStorage.setItem(storageName,JSON.stringify({\r\n            userId,token\r\n        }))\r\n    },[])\r\n\r\n    useEffect(() =>{\r\n        const data = JSON.parse(localStorage.getItem(storageName))\r\n        \r\n        if (data && data.token){\r\n        login(data.token, data.userId)            \r\n        }\r\n    }, [login])\r\n\r\n    return {login,token,userId}\r\n}"]},"metadata":{},"sourceType":"module"}