{"ast":null,"code":"import { useState, useCallback, useEffect } from \"react\";\nconst storageName = 'userData';\nexport const useAuth = () => {\n  const [token, setToken] = useState(null);\n  const [ready, setReady] = useState(false);\n  const [userId, setUserId] = useState(null);\n  const [decoded, setDecoded] = useState('');\n\n  const updateHandler = async () => {\n    try {\n      const data = JSON.parse(localStorage.getItem(storageName));\n\n      if (data && data.token) {\n        temp = data.token;\n        const jwt = await request('api/data/verify', 'POST', {\n          temp\n        });\n        login(data.token, data.userId, jwt);\n      }\n\n      setReady(true);\n    } catch (e) {}\n  };\n\n  const login = useCallback((jwtToken, id, data) => {\n    setToken(jwtToken);\n    setUserId(id);\n    setDecoded(data);\n    localStorage.setItem(storageName, JSON.stringify({\n      userId: id,\n      token: jwtToken //   decoded:data\n\n    }));\n  }, []);\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    setDecoded(null);\n    localStorage.removeItem(storageName);\n  }, []);\n  useEffect(() => {\n    /*const data = JSON.parse(localStorage.getItem(storageName))\r\n      if (data && data.token){\r\n     login(data.token, data.userId, data.decoded)   \r\n      }\r\n    setReady(true)\r\n    */\n  }, [updateHandler]);\n  return {\n    login,\n    logout,\n    token,\n    userId,\n    decoded,\n    ready\n  };\n};","map":{"version":3,"sources":["C:/Users/Kirill/Desktop/HSE/callSystem/front/src/hooks/auth.hook.js"],"names":["useState","useCallback","useEffect","storageName","useAuth","token","setToken","ready","setReady","userId","setUserId","decoded","setDecoded","updateHandler","data","JSON","parse","localStorage","getItem","temp","jwt","request","login","e","jwtToken","id","setItem","stringify","logout","removeItem"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAgD,OAAhD;AAEA,MAAMC,WAAW,GAAG,UAApB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAK;AACxB,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBN,QAAQ,CAAC,IAAD,CAAjC;AACA,QAAM,CAACO,KAAD,EAAOC,QAAP,IAAmBR,QAAQ,CAAC,KAAD,CAAjC;AACA,QAAM,CAACS,MAAD,EAAQC,SAAR,IAAqBV,QAAQ,CAAC,IAAD,CAAnC;AACA,QAAM,CAACW,OAAD,EAASC,UAAT,IAAuBZ,QAAQ,CAAC,EAAD,CAArC;;AAEA,QAAMa,aAAa,GAAG,YAAU;AAE5B,QAAG;AACC,YAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqBf,WAArB,CAAX,CAAb;;AAEJ,UAAIW,IAAI,IAAIA,IAAI,CAACT,KAAjB,EAAuB;AAEnBc,QAAAA,IAAI,GAAGL,IAAI,CAACT,KAAZ;AACA,cAAMe,GAAG,GAAG,MAAMC,OAAO,CAAC,iBAAD,EAAmB,MAAnB,EAA2B;AAACF,UAAAA;AAAD,SAA3B,CAAzB;AAEAG,QAAAA,KAAK,CAACR,IAAI,CAACT,KAAN,EAAaS,IAAI,CAACL,MAAlB,EAA0BW,GAA1B,CAAL;AAEH;;AACDZ,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACC,KAZD,CAYE,OAAMe,CAAN,EAAS,CAEV;AACJ,GAjBD;;AAoBA,QAAMD,KAAK,GAAGrB,WAAW,CAAE,CAACuB,QAAD,EAAWC,EAAX,EAAeX,IAAf,KAAuB;AAC9CR,IAAAA,QAAQ,CAACkB,QAAD,CAAR;AACAd,IAAAA,SAAS,CAACe,EAAD,CAAT;AACAb,IAAAA,UAAU,CAACE,IAAD,CAAV;AAIAG,IAAAA,YAAY,CAACS,OAAb,CAAqBvB,WAArB,EAAiCY,IAAI,CAACY,SAAL,CAAe;AAC5ClB,MAAAA,MAAM,EAACgB,EADqC;AAE5CpB,MAAAA,KAAK,EAACmB,QAFsC,CAG/C;;AAH+C,KAAf,CAAjC;AAKH,GAZwB,EAYvB,EAZuB,CAAzB;AAcA,QAAMI,MAAM,GAAG3B,WAAW,CAAE,MAAM;AAC9BK,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,IAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAK,IAAAA,YAAY,CAACY,UAAb,CAAwB1B,WAAxB;AACH,GALyB,EAKxB,EALwB,CAA1B;AAOAD,EAAAA,SAAS,CAAC,MAAM;AACZ;;;;;;AAQH,GATQ,EASN,CAACW,aAAD,CATM,CAAT;AAWA,SAAO;AAACS,IAAAA,KAAD;AAAOM,IAAAA,MAAP;AAAcvB,IAAAA,KAAd;AAAoBI,IAAAA,MAApB;AAA2BE,IAAAA,OAA3B;AAAmCJ,IAAAA;AAAnC,GAAP;AACH,CA3DM","sourcesContent":["import { useState, useCallback, useEffect} from \"react\"\r\n\r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () =>{\r\n    const [token,setToken] = useState(null)\r\n    const [ready,setReady] = useState(false)\r\n    const [userId,setUserId] = useState(null)\r\n    const [decoded,setDecoded] = useState('')\r\n\r\n    const updateHandler = async() =>{\r\n        \r\n        try{\r\n            const data = JSON.parse(localStorage.getItem(storageName))\r\n\r\n        if (data && data.token){\r\n         \r\n            temp = data.token\r\n            const jwt = await request('api/data/verify','POST', {temp} )\r\n\r\n            login(data.token, data.userId, jwt)   \r\n\r\n        }\r\n        setReady(true)\r\n        } catch(e) {\r\n\r\n        }\r\n    } \r\n\r\n\r\n    const login = useCallback( (jwtToken, id, data) =>{\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n        setDecoded(data)\r\n\r\n\r\n\r\n        localStorage.setItem(storageName,JSON.stringify({\r\n            userId:id,\r\n            token:jwtToken,\r\n         //   decoded:data\r\n        }))\r\n    },[])\r\n\r\n    const logout = useCallback( () => {\r\n        setToken(null)\r\n        setUserId(null)\r\n        setDecoded(null)\r\n        localStorage.removeItem(storageName)\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        /*const data = JSON.parse(localStorage.getItem(storageName))\r\n\r\n        if (data && data.token){\r\n         login(data.token, data.userId, data.decoded)   \r\n\r\n        }\r\n        setReady(true)\r\n        */\r\n    }, [updateHandler])\r\n\r\n    return {login,logout,token,userId,decoded,ready}\r\n}"]},"metadata":{},"sourceType":"module"}